From 8752fb343d0eee9023b119998e07a2b69b878b96 Mon Sep 17 00:00:00 2001
From: Ziyang Zhou <ziyang.zhou@outlook.com>
Date: Sun, 9 May 2021 23:09:00 +0800
Subject: [PATCH 1/7] fix booting

---
 fs_mgr/libfstab/boot_config.cpp |  6 ++++--
 init/first_stage_init.cpp       | 18 +++++++++++++++---
 init/init.cpp                   |  0
 init/property_service.cpp       |  0
 init/service.cpp                |  1 +
 rootdir/init.rc                 |  1 -
 6 files changed, 20 insertions(+), 6 deletions(-)
 mode change 100644 => 100755 init/init.cpp
 mode change 100644 => 100755 init/property_service.cpp

diff --git a/fs_mgr/libfstab/boot_config.cpp b/fs_mgr/libfstab/boot_config.cpp
index b21495e..7993d15 100644
--- a/fs_mgr/libfstab/boot_config.cpp
+++ b/fs_mgr/libfstab/boot_config.cpp
@@ -154,13 +154,15 @@ bool GetKernelCmdlineFromString(const std::string& cmdline, const std::string& k
 
 void ImportKernelCmdline(const std::function<void(std::string, std::string)>& fn) {
     std::string cmdline;
-    android::base::ReadFileToString("/proc/cmdline", &cmdline);
+    android::base::ReadFileToString("/proc/self/cmdline", &cmdline); // HACKED
+    std::replace(cmdline.begin(), cmdline.end(), '\0', ' '); // HACKED
     ImportKernelCmdlineFromString(android::base::Trim(cmdline), fn);
 }
 
 bool GetKernelCmdline(const std::string& key, std::string* out) {
     std::string cmdline;
-    android::base::ReadFileToString("/proc/cmdline", &cmdline);
+    android::base::ReadFileToString("/proc/self/cmdline", &cmdline); // HACKED
+    std::replace(cmdline.begin(), cmdline.end(), '\0', ' '); // HACKED
     return GetKernelCmdlineFromString(android::base::Trim(cmdline), key, out);
 }
 
diff --git a/init/first_stage_init.cpp b/init/first_stage_init.cpp
index e06a645..6406662 100644
--- a/init/first_stage_init.cpp
+++ b/init/first_stage_init.cpp
@@ -36,6 +36,7 @@
 #include <android-base/chrono_utils.h>
 #include <android-base/file.h>
 #include <android-base/logging.h>
+#include <android-base/strings.h>
 #include <android-base/stringprintf.h>
 #include <android/avf_cc_flags.h>
 #include <fs_mgr.h>
@@ -352,6 +353,8 @@ int FirstStageMain(int argc, char** argv) {
     CHECKCALL(mkdir("/dev/pts", 0755));
     CHECKCALL(mkdir("/dev/socket", 0755));
     CHECKCALL(mkdir("/dev/dm-user", 0755));
+    mount("/system/etc", "/etc", "none", MS_BIND, NULL); // cgroup fix
+    unshare(CLONE_NEWCGROUP);
     CHECKCALL(mount("devpts", "/dev/pts", "devpts", 0, NULL));
 #define MAKE_STR(x) __STRING(x)
     CHECKCALL(mount("proc", "/proc", "proc", 0, "hidepid=2,gid=" MAKE_STR(AID_READPROC)));
@@ -420,7 +423,6 @@ int FirstStageMain(int argc, char** argv) {
         for (const auto& [error_string, error_errno] : errors) {
             LOG(ERROR) << error_string << " " << strerror(error_errno);
         }
-        LOG(FATAL) << "Init encountered errors starting first stage, aborting";
     }
 
     LOG(INFO) << "init first stage started!";
@@ -557,12 +559,22 @@ int FirstStageMain(int argc, char** argv) {
            1);
 
     const char* path = "/system/bin/init";
-    const char* args[] = {path, "selinux_setup", nullptr};
+    std::vector<const char *> args = {path, "second_stage"};
+    std::string init_cmdline;
+    android::base::ReadFileToString("/proc/self/cmdline", &init_cmdline);
+    std::replace(init_cmdline.begin(), init_cmdline.end(), '\0', ' ');
+    auto cmd_vector = android::base::Split(android::base::Trim(init_cmdline), " ");
+    int i = 0;
+    for (const auto& entry : cmd_vector) {
+        if (i++ == 0) continue; // ignore first arg '/init'
+        args.push_back(entry.c_str());
+    }
+    args.push_back(nullptr);
     auto fd = open("/dev/kmsg", O_WRONLY | O_CLOEXEC);
     dup2(fd, STDOUT_FILENO);
     dup2(fd, STDERR_FILENO);
     close(fd);
-    execv(path, const_cast<char**>(args));
+    execv(path, const_cast<char**>(args.data()));
 
     // execv() only returns if an error happened, in which case we
     // panic and never fall through this conditional.
diff --git a/init/init.cpp b/init/init.cpp
old mode 100644
new mode 100755
diff --git a/init/property_service.cpp b/init/property_service.cpp
old mode 100644
new mode 100755
diff --git a/init/service.cpp b/init/service.cpp
index d76a5d5..cb82838 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -76,6 +76,7 @@ namespace android {
 namespace init {
 
 static Result<std::string> ComputeContextFromExecutable(const std::string& service_path) {
+    se_hack1("HACKED");
     std::string computed_context;
 
     char* raw_con = nullptr;
diff --git a/rootdir/init.rc b/rootdir/init.rc
index ae6a658..32c6069 100644
--- a/rootdir/init.rc
+++ b/rootdir/init.rc
@@ -543,7 +543,6 @@ on post-fs
 
     # Once everything is setup, no need to modify /.
     # The bind+remount combination allows this to work in containers.
-    mount rootfs rootfs / remount bind ro nodev
 
     # Mount default storage into root namespace
     mount none /mnt/user/0 /storage bind rec
-- 
2.49.0

